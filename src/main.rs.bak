use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use bcrypt::{hash, verify, DEFAULT_COST};
use chrono::Utc;
use dotenv::dotenv;
use futures::stream::StreamExt;
use jsonwebtoken::{decode, encode, DecodingKey, EncodingKey, Header, Validation};
use lazy_static::lazy_static;
use mongodb::{bson::{doc, oid::ObjectId}, options::FindOptions, Client, Database, Cursor};
use serde::{Deserialize, Serialize};
use serde_json::json;
use std::env;
use std::sync::Arc;

lazy_static! {
    static ref SECRET_KEY: String = {
        dotenv().ok();
        env::var("SECRET_KEY").expect("SECRET_KEY must be set")
    };
    static ref MONGO_URI: String = {
        dotenv().ok();
        env::var("MONGO_URI").expect("MONGO_URI must be set")
    };

    static ref MONGO_DB_NAME: String = {
        dotenv().ok();
        env::var("MONGO_DB").expect("MONGO_DB must be set")
    };
}

#[derive(Serialize, Deserialize, Debug)]
pub struct User {
    #[serde(rename = "_id")]
    pub id: ObjectId,
    pub email: String,
    pub password_hash: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct UserInput {
    pub email: String,
    pub password: String,
}


#[derive(Serialize, Deserialize, Debug)]
struct Spark {
    #[serde(rename = "_id")]
    pub id: ObjectId,
    pub content: String,
    pub create_by: ObjectId,
    pub create_at: String,
    pub like_count: i32,
    // the liked user ID list
    pub like_users: Vec<ObjectId>
}

#[derive(Serialize, Deserialize, Debug)]
pub struct NewSpark {
    pub content: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Claims {
    pub id: ObjectId,
    pub email: String,
    pub exp: i64,
}


#[derive(Clone)]
struct AppState {
    db: Arc<Database>,
}

async fn register_user(user: web::Json<UserInput>, state: web::Data<AppState>) -> impl Responder {
    let collection = state.db.collection("users");
    let password_hash = hash(&user.password, DEFAULT_COST).unwrap();

    let new_user = User {
        id: ObjectId::new(),
        email: user.email.clone(),
        password_hash,
    };

    let result = collection.find_one(doc! {"email": &user.email}, None).await.unwrap();
    if result.is_none() {
        // No existing user, insert new user
        collection.insert_one(new_user, None).await.unwrap();
        HttpResponse::Ok().json("Congratulations! Enjoy it! 😊")
    } else {
        // User already exists
        HttpResponse::Conflict().json("Oh, you already joined our garden. Enjoy it! 😂")
    }
}

fn generate_token(user_id:ObjectId, email: String) -> String{
    // Generate a JWT token
    encode(
        &Header::default(),
        &json!({"id": user_id, "email": email, "exp": Utc::now().timestamp() + 60 * 60 * 24 * 365 }),
        &EncodingKey::from_secret(SECRET_KEY.as_ref()),
    ).unwrap()
}

async fn login_user(user_input: web::Json<UserInput>, state: web::Data<AppState>) -> impl Responder {
    let collection: mongodb::Collection<User> = state.db.collection("users");
    let result = collection.find_one(doc! {"email": &user_input.email}, None).await.unwrap();

    match result {
        Some(user) => {
            // let user: User = doc.unwrap();
            if verify( &user_input.password,&user.password_hash).unwrap() {
                // Generate a JWT token (simple implementation)
                let token = generate_token(user.id, user.email);
                HttpResponse::Ok().json(json!({ "token": token }))
            } else {
                HttpResponse::Unauthorized().json("Ops, maybe input a password. 😔 Try it again")
            }
        }
        None => {
            // User not found, create a new one
            let password_hash = hash(&user_input.password, DEFAULT_COST).unwrap();
            let user_id = ObjectId::new();
            let new_user = User {
                id: user_id.clone(),
                email: user_input.email.clone(),
                password_hash,
            };
            collection.insert_one(new_user, None).await.unwrap();
            // Generate a JWT token for the new user
            let token = generate_token(user_id, user_input.email.clone());
            HttpResponse::Ok().json(json!({ "token": token }))
        }
    }
}


async fn get_sparks_by_date(state: web::Data<AppState>) -> impl Responder {
    let collection = state.db.collection::<Spark>("sparks");

    let find_options = FindOptions::builder()
        .sort(doc! { "create_at": -1 })  
        .limit(100) 
        .build();

    let mut cursor: Cursor<Spark> = collection.find(None, find_options).await.unwrap();
    let mut sparks: Vec<Spark> = Vec::new();

    while let Some(result) = cursor.next().await {
        match result {
            Ok(spark) => sparks.push(spark),
            Err(e) => return HttpResponse::InternalServerError().body(e.to_string()),
        }
    }

    HttpResponse::Ok().json(sparks)
}

async fn get_sparks_by_star(state: web::Data<AppState>) -> impl Responder {
    let collection = state.db.collection::<Spark>("sparks");
     let find_options = FindOptions::builder()
        .sort(doc! { "like_count": -1 })
        .limit(100) 
        .build();

    let mut cursor: Cursor<Spark> = collection.find(None, find_options).await.unwrap();
    let mut sparks: Vec<Spark> = Vec::new();

    while let Some(result) = cursor.next().await {
        match result {
            Ok(spark) => sparks.push(spark),
            Err(e) => return HttpResponse::InternalServerError().body(e.to_string()),
        }
    }

    HttpResponse::Ok().json(sparks)
}

pub fn get_claims_from_token(req: &actix_web::HttpRequest) -> Result<Claims, HttpResponse> {
    // Get JWT token from request header
    let auth_header = req.headers().get("Authorization");
    if auth_header.is_none() {
        return Err(HttpResponse::Unauthorized().body("Authorization header missing"));
    }

    let token = auth_header.unwrap().to_str().unwrap().replace("Bearer ", "");
    println!("Token: {}", token);
    let decoding_key = DecodingKey::from_secret(SECRET_KEY.as_ref());
    let token_data = decode::<Claims>(&token, &decoding_key, &Validation::default());

    match token_data {
        Ok(claims) => { Ok(claims.claims)},
        Err(e) => {
            println!("Error decoding token: {}", e);
            return Err(HttpResponse::Unauthorized().body("Invalid token"));
        }
    }
}

async fn add_spark(spark: web::Json<NewSpark>, state: web::Data<AppState>, req: actix_web::HttpRequest) -> impl Responder {
    let collection = state.db.collection::<Spark>("sparks");

    let claims = match get_claims_from_token(&req) {
        Ok(claims) => claims,
        Err(error_response) => return error_response,
    };

    // find user
    let user_collection = state.db.collection::<User>("users");
    let user_doc = user_collection.find_one(doc! {"email": &claims.email}, None).await.unwrap();
    if user_doc.is_none() {
        return HttpResponse::Unauthorized().body("User not found");
    }

    let user = user_doc.unwrap();

    // create a new spark document
    let new_spark = Spark {
        id: ObjectId::new(),
        content: spark.content.clone(),
        create_by: user.id,
        create_at: Utc::now().to_rfc3339(),
        like_count: 0,
        like_users: vec![],
    };

    collection.insert_one(new_spark, None).await.unwrap();

    HttpResponse::Ok().body("Spark added")
}


async fn like_spark(path: web::Path<String>, state: web::Data<AppState>, req: actix_web::HttpRequest) -> impl Responder {
    let collection = state.db.collection::<Spark>("sparks");

    let claims = match get_claims_from_token(&req) {
        Ok(claims) => claims,
        Err(error_response) => return error_response,
    };

    let spark_id = path.into_inner();
    let object_id = ObjectId::parse_str(&spark_id).unwrap();

    let spark = collection.find_one(doc! {"_id": object_id}, None).await.unwrap();
    match spark {
        Some(mut spark) => {
            // check if has liked
            if spark.like_users.contains(&claims.id) {
                return HttpResponse::Ok().body("")
            }
            // update like_users
            // update like_count
            spark.like_users.push(claims.id);
            spark.like_count += 1;
            collection.replace_one(doc! {"_id": object_id}, spark, None).await.unwrap();
            return HttpResponse::Ok().body("👍")
        },
        None =>  return HttpResponse::NotFound().body("Spark gone 😭")
    }
}

async fn get_database() -> Database {
    let mongo_uri_copy = MONGO_URI.clone();
    let client = Client::with_uri_str(mongo_uri_copy).await.expect("Failed to initialize MongoDB client");
    client.database(&MONGO_DB_NAME)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // Load environment variables from .env file
    dotenv::dotenv().ok();
    println!("Secret Key: {}", *SECRET_KEY);

    // Check if the MongoDB connection is successful
    let db = match check_database_connection().await {
        Ok(db) => db,
        Err(e) => {
            panic!("Failed to connect to MongoDB: {}", e);
        }
    };

    println!("Connected to MongoDB database: {}", *MONGO_DB_NAME);

    // Start the web server
    let server = HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(AppState {
                db: Arc::new(db.clone()),
            }))
            .route("/register", web::post().to(register_user))
            .route("/login", web::post().to(login_user))
            .route("/sparks/latest", web::get().to(get_sparks_by_date))
            .route("/sparks/top", web::get().to(get_sparks_by_star))
            .route("/sparks", web::post().to(add_spark))
            .route("/sparks/{id}/like", web::post().to(like_spark))
    })
    .bind("0.0.0.0:8080")?;

    println!("Web server is running on http://0.0.0.0:8080");

    server.run().await
}

async fn check_database_connection() -> Result<Database, mongodb::error::Error> {
    let db = get_database().await;
    db.run_command(doc! {"ping": 1}, None).await?;
    Ok(db)
}
